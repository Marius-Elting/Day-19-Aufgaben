/* basiert auf rows und cols 
in Spalten strukturieren 
 Rasterlayout

 lässt sich mit Flex vermischen
*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* section {
    display: grid;
    Units sind alle verwendbar
    grid-template-columns: 30% 30% 30%;
    Grid eigene Unit  fr = fraction / Bruchteil
    grid-template-columns: 1fr 1fr 1fr;
     repeat wie oft soll das Repeatet werden und wie viel
    repeat(wie oft,  wie groß)
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 200px 15vh 200px 300px;
} */

/* Grid passt sich nicht an den text an */
/*  Imemr Grid row und column verwenden, damit die plätze fest sind
 */
/* section div {
    height: 100px;
    width: 100px;
} */

/* p {
    overflow: scroll;
    overflow-x: auto;
}

.box1 {
    background-color: crimson;
    grid-column: 1/ 3;
    grid-column Shorthand: 1. wert Start, 2. Wert start
}

.box2 {
    background-color: blue;
    grid-column: 3/4;
    grid-row: 1/3;
}

.box3 {
    background-color: yellow;
    grid-column: 1/3;
    grid-row: 1/2;
}

.box4 {
    background-color: green;
    grid-column: 1/ 4;
}

.box5 {
    background-color: salmon;
}

.box6 {
    background-color: tomato;
    grid-column: 2/4;
} */



article {
    display: grid;
    grid-template-columns: 1fr 2fr 2fr 1fr;
    grid-template-rows: repeat(4, 100px);
    /* Grid über das Eltern element steuern */
    grid-template-areas:
        "WW WW Batman Aquaman"
        "Groot Groot Batman  Superman"
        "Ironman Ironman Ironman Hulk"
        "Thor Thor Thor Thor"
    ;
    gap: 10px;
}

.container1 {
    background-color: green;
    grid-area: WW;
}

.container2 {
    background-color: Blue;
    grid-area: Batman;
}

.container3 {
    background-color: red;
    grid-area: Aquaman;

}

.container4 {
    background-color: yellow;
    grid-area: Groot;

}

.container5 {
    background-color: tomato;
    grid-area: Superman;

}

.container6 {
    background-color: gold;
    grid-area: Ironman;


}

.container7 {
    background-color: blue;
    grid-area: Hulk;
    display: grid;
    /* 1. Wert vertikal, 2. Wert Horizontal */
    place-items: start center
}

.container8 {
    background-color: teal;
    grid-area: Thor;
    /* Inhalt mit Grid zentrieren */
    /* kind Elemnt im Eltern Element anordnen (vom Kind aus):
    place-self: center etc...
    */
    display: grid;
    align-items: center;
    justify-items: center;
}